// Mocks generated by Mockito 5.4.6 from annotations
// in joblinc/test/features/companypages/company_locations_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i7;

import 'package:joblinc/features/companypages/data/data/models/getmycompany_response.dart'
    as _i3;
import 'package:joblinc/features/companypages/data/data/models/update_company_model.dart'
    as _i6;
import 'package:joblinc/features/companypages/data/data/repos/update_company_repo.dart'
    as _i4;
import 'package:joblinc/features/companypages/data/data/services/update_company_api_service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUpdateCompanyApiService_0 extends _i1.SmartFake
    implements _i2.UpdateCompanyApiService {
  _FakeUpdateCompanyApiService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompanyResponse_1 extends _i1.SmartFake
    implements _i3.CompanyResponse {
  _FakeCompanyResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UpdateCompanyRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCompanyRepo extends _i1.Mock implements _i4.UpdateCompanyRepo {
  MockUpdateCompanyRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UpdateCompanyApiService get apiService => (super.noSuchMethod(
        Invocation.getter(#apiService),
        returnValue: _FakeUpdateCompanyApiService_0(
          this,
          Invocation.getter(#apiService),
        ),
      ) as _i2.UpdateCompanyApiService);

  @override
  _i5.Future<void> updateCompany(_i6.UpdateCompanyModel? updateModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCompany,
          [updateModel],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.CompanyResponse> uploadCompanyLogo(_i7.File? imageFile) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadCompanyLogo,
          [imageFile],
        ),
        returnValue:
            _i5.Future<_i3.CompanyResponse>.value(_FakeCompanyResponse_1(
          this,
          Invocation.method(
            #uploadCompanyLogo,
            [imageFile],
          ),
        )),
      ) as _i5.Future<_i3.CompanyResponse>);

  @override
  _i5.Future<_i3.CompanyResponse> uploadCompanyCover(_i7.File? imageFile) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadCompanyCover,
          [imageFile],
        ),
        returnValue:
            _i5.Future<_i3.CompanyResponse>.value(_FakeCompanyResponse_1(
          this,
          Invocation.method(
            #uploadCompanyCover,
            [imageFile],
          ),
        )),
      ) as _i5.Future<_i3.CompanyResponse>);

  @override
  _i5.Future<_i3.CompanyResponse> removeCompanyLogo() => (super.noSuchMethod(
        Invocation.method(
          #removeCompanyLogo,
          [],
        ),
        returnValue:
            _i5.Future<_i3.CompanyResponse>.value(_FakeCompanyResponse_1(
          this,
          Invocation.method(
            #removeCompanyLogo,
            [],
          ),
        )),
      ) as _i5.Future<_i3.CompanyResponse>);

  @override
  _i5.Future<_i3.CompanyResponse> removeCompanyCover() => (super.noSuchMethod(
        Invocation.method(
          #removeCompanyCover,
          [],
        ),
        returnValue:
            _i5.Future<_i3.CompanyResponse>.value(_FakeCompanyResponse_1(
          this,
          Invocation.method(
            #removeCompanyCover,
            [],
          ),
        )),
      ) as _i5.Future<_i3.CompanyResponse>);

  @override
  _i5.Future<_i3.CompanyResponse> updateCompanyLocations(
          List<Map<String, dynamic>>? locations) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCompanyLocations,
          [locations],
        ),
        returnValue:
            _i5.Future<_i3.CompanyResponse>.value(_FakeCompanyResponse_1(
          this,
          Invocation.method(
            #updateCompanyLocations,
            [locations],
          ),
        )),
      ) as _i5.Future<_i3.CompanyResponse>);
}
