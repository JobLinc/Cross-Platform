// Mocks generated by Mockito 5.4.6 from annotations
// in joblinc/test/features/companypages/dashboard_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:joblinc/features/jobs/data/repos/job_repo.dart' as _i2;
import 'package:joblinc/features/jobs/logic/cubit/job_list_cubit.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJobRepo_0 extends _i1.SmartFake implements _i2.JobRepo {
  _FakeJobRepo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJobListState_1 extends _i1.SmartFake implements _i3.JobListState {
  _FakeJobListState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [JobListCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockJobListCubit extends _i1.Mock implements _i3.JobListCubit {
  MockJobListCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.JobRepo get jobRepo => (super.noSuchMethod(
        Invocation.getter(#jobRepo),
        returnValue: _FakeJobRepo_0(
          this,
          Invocation.getter(#jobRepo),
        ),
      ) as _i2.JobRepo);

  @override
  List<Map<String, dynamic>> get companyNames => (super.noSuchMethod(
        Invocation.getter(#companyNames),
        returnValue: <Map<String, dynamic>>[],
      ) as List<Map<String, dynamic>>);

  @override
  set companyNames(List<Map<String, dynamic>>? _companyNames) =>
      super.noSuchMethod(
        Invocation.setter(
          #companyNames,
          _companyNames,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.JobListState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeJobListState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.JobListState);

  @override
  _i4.Stream<_i3.JobListState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i3.JobListState>.empty(),
      ) as _i4.Stream<_i3.JobListState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> getCompanyNames() => (super.noSuchMethod(
        Invocation.method(
          #getCompanyNames,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> getAllJobs({
    bool? isSearch = false,
    Map<String, dynamic>? queryParams,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllJobs,
          [],
          {
            #isSearch: isSearch,
            #queryParams: queryParams,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> getSavedJobs() => (super.noSuchMethod(
        Invocation.method(
          #getSavedJobs,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> getAppliedJobs() => (super.noSuchMethod(
        Invocation.method(
          #getAppliedJobs,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> getJobDetails() => (super.noSuchMethod(
        Invocation.method(
          #getJobDetails,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> getAllResumes() => (super.noSuchMethod(
        Invocation.method(
          #getAllResumes,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  dynamic uploadResume(_i5.File? resumeFile) =>
      super.noSuchMethod(Invocation.method(
        #uploadResume,
        [resumeFile],
      ));

  @override
  dynamic unsaveJob(String? jobId) => super.noSuchMethod(Invocation.method(
        #unsaveJob,
        [jobId],
      ));

  @override
  dynamic saveJob(String? jobId) => super.noSuchMethod(Invocation.method(
        #saveJob,
        [jobId],
      ));

  @override
  dynamic applyJob(
    String? jobId,
    Map<String, dynamic>? jobApplication,
  ) =>
      super.noSuchMethod(Invocation.method(
        #applyJob,
        [
          jobId,
          jobApplication,
        ],
      ));

  @override
  dynamic createJob({required Map<String, dynamic>? jobReq}) =>
      super.noSuchMethod(Invocation.method(
        #createJob,
        [],
        {#jobReq: jobReq},
      ));

  @override
  void emit(_i3.JobListState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i6.Change<_i3.JobListState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
